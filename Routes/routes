var express = require('express');
var router = express.Router();
var jwt = require('jsonwebtoken');
var path = require('path');
var helper = require('./helper_functions');

// MODELS
var models = require('../Database/models')

// COLLECTIONS
var collections = require('../Database/collections');

//USEFEL MIDDLEWARE
var auth = function(request, response, next) {
	var bearerToken;
	var bearerHeader = request.headers["authorization"];
	if (typeof bearerHeader !== 'undefined') {
		var bearer = bearerHeader.split(" ");
		bearerToken = bearer[0];
		models.User.forge({token: bearerToken})
		.fetch()
		.then(function(user) {
			if (user) {
				request.user = user;
				next();
			} else {
				response.status(403)
				.json({error: true, message: "ERROR: Invalid authorization token"});
			}
		})
		.catch(function(error) {
			response.json(500)
			.json({error: true, message: "ERROR: Database query failed: " + error})
		});
	} else {
		response.status(403)
		.json({error: true, message: "ERROR: Authoriztion token required"});
	}
}

//ROUTES - FIX LATER
router.get('/', function(request,response) {
	if (request.user){
		response.json(request.user.get('email') + " is signed in");
	} else {
		collections.Users.forge()
		.fetch()
		.then (function (users) {
			response.status(200).json(users);
		})
		.catch(function () {
			response.status(400)
			.json("ERROR: can't find users");
		});
	}
})

// SIGN UP ROUTES
router.route('/signup')

	.get(function(request, response) {
		response.sendFile(path.join(__dirname, '../', 'public/index.html'));
	})

	.post(function(request,response,next) {
		if (!request.body.email) {
			response.status(400)
			.json({error: true, message: "Please enter an email"});
		} else if (!request.body.password){
			response.status(400)
			.json({error: true, message: "Please enter a password"});
		} else {
			models.User.forge({email: request.body.email})
			.fetch()
			.then(function (user) {
				if (user) {
					response.status(400)
					.json({error: true, message: "the email: " + user + " is already being used"});
				} else {

					var newToken = jwt.sign({
						email: request.body.email,
						password: request.body.password
						}, process.env.JWT_SECRET);

					var newUser = new models.User({
						email: request.body.email,
						password: request.body.password,
						token: newToken
					});
					newUser.save();
					var msg = "New account created for " + newUser.get('email');
					response.status(201)
					.json({error: false, message: msg, data: newUser, token: newUser.token});
				}
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Database query failed: " + error});
			});
		}
	});

// LOGIN ROUTES
router.route('/login')

	.post(function(request, response) {
		models.User.forge({email: request.body.email})
		.fetch()
		.then(function (user) {
			if (!user) {
				response.status(404)
				.json({error: true, message: "ERROR: user not found"});
			} else if (request.body.password != user.get('password')) {
				response.status(403)
				.json({error: true, message: "ERROR: incorrect password"});
			} else {
				response.status(200)
				.json({error: false, message: user.get('email') + " has logged in", data: user, token: user.token})
			}
		})
		.catch( function(error) {
			if (error) {
				response.status(500)
				.json("ERROR: Database query failed: " + error);
			}
		});
	})

	.get(function(request, response) {
		if(request.user) {
			response.status(200)
			.json({error: true, message: "ERROR: Already logged in as " + request.user.get('email')});
		} else {
			response.status(401)
			.json({error: true, message: "ERROR: Not logged in as anyone"});
		}
	});


// USER INFO
router.route('/in')
	.get(function(request, response){
		response.json(Boolean(request.user));
	});

// CRUD FOR CATEGORIES - retrieves data from user currently signed in
router.route('/categories')

	.all(auth)

	.post(function(request,response) {
		var newCategory = new models.Category({
			name: request.body.name,
			user_id: request.user.get('id')
		});
		newCategory.fetch()
		.then(function(category){
			helper.saveIt(newCategory, category, 'category', request, response)
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.get(function(request, response) {
		request.user.fetch({ withRelated: ['categories']})
		.then(function(user) {
			response.status(200)
			.json({error: false, message: "Sucessfuly read data from Database", data: user.related('categories')});
		})
		.catch(function(error){
			response.status(500)
			.json({error: true, message: "ERROR: Unable to read user's categories from Database: " + error});
		});
	})

	.put(function(request, response) {
		models.Category.forge({
			name: request.body.oldName,
			user_id: request.user.get('id')
		})
		.fetch()
		.then(function(oldCategory) {
			if (!oldCategory) {
				 response.status(404)
				 .json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: "});
			}
			models.Category.forge({
				name: request.body.newName,
				user_id: request.user.get('id')
			})
			.fetch()
			.then(function(newCategory) {
				if(newCategory) {
					response.status(400)
					.json({error: true, message: "ERROR: category already exists"});
				} else {
					oldCategory.save({
						name: request.body.newName || oldCategory.get('name'),
						user_id: request.user.get('id') || oldCategory.get('user_id')
					})
					.then(function() {
						response.status(200)
						.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
					})
					.catch(function(error) {
						response.status(500)
						.json({error: true, message: "ERROR: Unable to save update " + request.body.oldName + " in Database: " + error});
					});
				}
			})
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.delete(function(request, response) {
		models.Category.forge({name: request.body.name, user_id: request.user.get('id')})
		.fetch({ withRelated: ['todos']})
		.then(function(category) {
			if (category) {
				var toDelete = category.related('todos').models;
				toDelete.push(category);
				helper.deleteIt(toDelete, request.body.name, false, response);
			} else {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.body.name + " not found in Database: "});
			}
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	});

// CRUD for ToDos
router.route('/:category/todos')

	.all(auth, function(request, response, next) {
		request.category_name = request.params.category;
		models.Category.forge({name: request.category_name, user_id: request.user.get('id')})
		.fetch()
		.then(function(category){
			if (category) {
				request.categoryID = category.get('id');
				next();
			} else if (request.category_name == 'all') {
				next();
			} else {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.category_name + " not found in Database: " + error});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.post(function(request,response) {
		// create new todo
		if (!request.categoryID) {
			response.status(401)
			.json({error: true, message: "ERROR: Must provide category to create a todo"});
		}

		console.log(request.categoryID);
		var newToDo = new models.Todo({
			name: request.body.name,
			description: request.body.description,
			set_time: request.body.set_time,
			date: request.body.date,
			category_id: request.categoryID,
			user_id: request.user.get('id')
		});

		newToDo.fetch()
		.then(function(todo) {
			helper.saveIt(newToDo, todo, 'todo', request, response)
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.get(function(request, response) {
		helper.getIt(request.user, request.category_name, 'todos', response)
	})

	.put(function(request, response) {
		if (!request.categoryID) {
			response.status(401)
			.json({error: true, message: "ERROR: Must provide category to update a todo"});
		}
		models.Todo.forge({
			name: request.body.oldName,
			user_id: request.user.get('id'),
			category_id: request.categoryID
		})
		.fetch()
		.then(function(oldTodo) {
			if (!oldTodo) {
				 response.status(404)
				 .json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: "});
			}
			models.Todo.forge({
				name: request.body.newName,
				user_id: request.user.get('id')
			})
			.fetch()
			.then(function(newTodo) {
				if(newTodo) {
					response.status(400)
					.json({error: true, message: "ERROR: todo already exists"});
				} else {
					oldTodo.save({
						name: request.body.newName || oldTodo.get('name'),
						description: request.body.description || oldTodo.get('description'),
						set_time: request.body.set_time || oldTodo.get('set_time'),
						date: request.body.date || oldTodo.get('date'),
						category_id: request.categoryID || oldTodo.get('category_id'),
						user_id: request.user.get('id') || oldTodo.get('user_id')
					})
					.then(function() {
						response.status(200)
						.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
					})
					.catch(function(error) {
						response.status(500)
						.json({error: true, message: "ERROR: Unable to save update " + request.body.oldName + " in Database: " + error});
					});
				}
			})
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.delete(function(request, response) {
		if (!request.categoryID) {
			response.status(401)
			.json({error: true, message: "ERROR: Must provide category to insert todo into"});
		}
		models.Todo.forge({name: request.body.name, user_id: request.user.get('id'), category_id: request.categoryID})
		.fetch()
		.then(function(todo) {
			helper.deleteIt([todo], request.body.name, true, response);
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	});

// CRUD for routines
router.route('/:category/routines')

	.all(auth, function(request, response, next) {

		request.category_name = request.params.category;
		models.Category.forge({name: request.category_name, user_id: request.user.get('id')})
		.fetch()
		.then(function(category){
			if (category) {
				request.categoryID = category.get('id');
				next();
			} else if (request.category_name == 'all') {
				next();
			} else {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.category_name + " not found in Database: " + error});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.post(function(request,response) {
		// create new todo
		if (!request.categoryID) {
			response.status(401)
			.json({error: true, message: "ERROR: Must provide category to create a routine"});
		}

		var newRoutine = new models.Routine({
			name: request.body.name,
			description: request.body.description,
			fixed_time: request.body.fixed_time,
			has_goal: request.body.has_goal,
			user_id: request.user.get('id'),
			category_id: request.categoryID
		});

		newRoutine.fetch()
		.then(function(routine) {
			helper.saveIt(newRoutine, routine, 'routine', request, response);
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.get(function(request, response) {
		console.log('????')
		helper.getIt(request.user, request.category_name, 'routines', response);
	})

	.put(function(request, response) {

		if (!request.categoryID) {
			response.status(401)
			.json({error: true, message: "ERROR: Must provide category to update a routine"});
		}

		models.Routine.forge({
			name: request.body.oldName,
			user_id: request.user.get('id'),
			category_id: request.categoryID
		})
		.fetch()
		.then(function(oldRoutine) {
			if (!oldRoutine) {
				 response.status(404)
				 .json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: "});
			}
			models.Routine.forge({
				name: request.body.newName,
				user_id: request.user.get('id'),
				category_id: request.categoryID
			})
			.fetch()
			.then(function(newRoutine) {
				if(newRoutine) {
					response.status(400)
					.json({error: true, message: "ERROR: todo already exists"});
				} else {

					var type = null;
					if(oldRoutine.get('fixed_time') == true) {
						type = 'fixed';
					} else {
						type = 'flex'
					}
					oldRoutine.fetch({withRelated: [type, 'goal']})
					.then(function(fullRoutine) {
						fullRoutine.save({
							name: request.body.newName || oldRoutine.get('name'),
							description: request.body.description || oldRoutine.get('description'),
							fixed_time: request.body.fixed_time || oldRoutine.get('fixed_time'),
							has_goal: request.body.has_goal || oldRoutine.get('has_goal'),
							user_id: request.user.get('id') || oldRoutine.get('user_id'),
							category_id: request.categoryID
						})
						.then(function() {
							console.log(fullRoutine.related(type));
							if (fullRoutine.get('fixed_time')) {
								console.log(1)
								fullRoutine.related(type).save({
									days: request.body.days || fullRoutine.related(type).get('days'),
									time: request.body.time || fullRoutine.related(type).get('time')
								}).then(function() {
									console.log('a')
									if (fullRoutine.get('has_goal')) {
										helper.updateGoal(fullRoutine.related('goal'), request, response);
									} else {
										response.status(200)
										.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
									}
								})
								.catch(function(error) {
									response.status(500)
									.json({error: true, message: "ERROR: Unable to save update for availibility in Database: " + error});
								});
							} else {
								console.log(2)
								fullRoutine.related(type).save({
									days: request.body.days || fullRoutine.related(type).get('days'),
									length: request.body.length || fullRoutine.related(type).get('length')
								}).then(function() {
									console.log('b')
									if (fullRoutine.get('has_goal')) {
										helper.updateGoal(fullRoutine.related('goal'), request, response);
									} else {
										response.status(200)
										.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
									}
								})
								.catch(function(error) {
									response.status(500)
									.json({error: true, message: "ERROR: Unable to save update for availibility in Database: " + error});
								});
							}
						})
						.catch(function(error) {
							response.status(500)
							.json({error: true, message: "ERROR: Unable to save update for " + request.body.oldName + " in Database: " + error});
						});
					})
					.catch(function(error) {
						response.status(500)
						.json({error: true, message: "ERROR: Database query failed: " + error});
					});
				}
			})
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.delete(function(request, response) {
		models.Routine.forge({name: request.body.name, user_id: request.user.get('id'), category_id: request.categoryID})
		.fetch()
		.then(function(routine) {
			var type = null;
			if(routine.get('fixed_time') == true) {
				type = 'fixed';
			} else {
				type = 'flex'
			}
			routine.fetch({withRelated: [type, 'goal']})
			.then(function(fullRoutine) {
				var toDelete = [fullRoutine].concat(fullRoutine.related(type), fullRoutine.related('goal'))

				helper.deleteIt(toDelete, request.body.name, false, response)
			})
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	});

exports.router = router;