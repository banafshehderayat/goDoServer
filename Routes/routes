var express = require('express');
var router = express.Router();
var jwt = require('jsonwebtoken');
var path = require('path');
var helper = require('./helper_functions');

// MODELS
var models = require('../Database/models')

// COLLECTIONS
var collections = require('../Database/collections');

//USEFEL MIDDLEWARE
var auth = function(request, response, next) {
	var bearerToken;
	var bearerHeader = request.headers["authorization"];
	if (typeof bearerHeader !== 'undefined') {
		var bearer = bearerHeader.split(" ");
		bearerToken = bearer[0];
		models.User.forge({token: bearerToken})
		.fetch()
		.then(function(user) {
			if (user) {
				request.user = user;
				next();
			} else {
				response.status(403)
				.json({error: true, message: "ERROR: Invalid authorization token"});
			}
		})
		.catch(function(error) {
			response.json(500)
			.json({error: true, message: "ERROR: Database query failed: " + error})
		});
	} else {
		response.status(403)
		.json({error: true, message: "ERROR: Authoriztion token required"});
	}
}

//ROUTES - FIX LATER
router.get('/', function(request,response) {
	if (request.user){
		response.json(request.user.get('email') + " is signed in");
	} else {
		collections.Users.forge()
		.fetch()
		.then (function (users) {
			response.status(200).json(users);
		})
		.catch(function () {
			response.status(400)
			.json("ERROR: can't find users");
		});
	}
})

// SIGN UP ROUTES
router.route('/sign_in')

	.get(function(request, response) {
		response.sendFile(path.join(__dirname, '../', 'public/index.html'));
	})

	.post(function(request,response,next) {
		if (null) {
			console.log('test');
		}
		if (!request.body.email) {
			response.status(400)
			.json({error: true, message: "Please enter an email"});
		} else if (!request.body.password){
			response.status(400)
			.json({error: true, message: "Please enter a password"});
		} else {
			models.User.forge({email: request.body.email})
			.fetch()
			.then(function (user) {
				if (user) {
					response.status(400)
					.json({error: true, message: "the email: " + user + " is already being used"});
				} else {

					var newToken = jwt.sign({
						email: request.body.email,
						password: request.body.password
						}, process.env.JWT_SECRET);

					var newUser = new models.User({
						email: request.body.email,
						password: request.body.password,
						token: newToken
					});
					newUser.save();
					var msg = "New account created for " + newUser.get('email');
					response.status(201)
					.json({error: false, message: msg, data: newUser, token: newUser.token});
				}
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Database query failed: " + error});
			});
		}
	});

// LOGIN ROUTES
router.route('/login')

	.post(function(request, response) {
		models.User.forge({email: request.body.email})
		.fetch()
		.then(function (user) {
			if (!user) {
				response.status(404)
				.json({error: true, message: "ERROR: user not found"});
			} else if (request.body.password != user.get('password')) {
				response.status(403)
				.json({error: true, message: "ERROR: incorrect password"});
			} else {
				response.status(200)
				.json({error: false, message: user.get('email') + " has logged in", data: user, token: user.token})
			}
		})
		.catch( function(error) {
			if (error) {
				response.status(500)
				.json("ERROR: Database query failed: " + error);
			}
		});
	})

	.get(function(request, response) {
		if(request.user) {
			response.status(200)
			.json({error: true, message: "ERROR: Already logged in as " + request.user.get('email')});
		} else {
			response.status(401)
			.json({error: true, message: "ERROR: Not logged in as anyone"});
		}
	});


// USER INFO
router.route('/in')
	.get(function(request, response){
		response.json(Boolean(request.user));
	});

// CRUD FOR CATEGORIES - retrieves data from user currently signed in
router.route('/categories')

	.all(auth)

	.post(function(request,response) {
		var newCategory = new models.Category({
			name: request.body.name,
			user_id: request.user.get('id')
		});
		newCategory.fetch()
		.then(function(category) {
			if(category) {
				response.status(400)
				.json({error: true, message: "ERROR: category already exists"});
			} else {
				newCategory.save()
				.then(function() {
					response.status(201)
					.json({error: false, message: "Sucessfully created " + request.body.name + " in Database"});
				})
				.catch(function() {
					response.status(500)
					.json({error: true, message: "ERROR: Unable to create " + request.body.name + " in Database: " + err});
				});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.get(function(request, response) {
		request.user.fetch({ withRelated: ['categories']})
		.then(function(user) {
			response.status(200)
			.json({error: false, message: "Sucessfuly read data from Database", data: user.related('categories')});
		})
		.catch(function(error){
			response.status(500)
			.json({error: true, message: "ERROR: Unable to read user's categories from Database: " + error});
		});
	})

	.put(function(request, response) {
		models.Category.forge({
			name: request.body.oldName,
			user_id: request.user.get('id')
		})
		.fetch()
		.then(function(oldCategory) {
			if (!oldCategory) {
				 response.status(404)
				 .json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: "});
			}
			models.Category.forge({
				name: request.body.newName,
				user_id: request.user.get('id')
			})
			.fetch()
			.then(function(newCategory) {
				if(newCategory) {
					response.status(400)
					.json({error: true, message: "ERROR: category already exists"});
				} else {
					oldCategory.save({
						name: request.body.newName || category.get('name'),
						user_id: request.user.get('id') || category.get('user_id')
					})
					.then(function() {
						response.status(200)
						.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
					})
					.catch(function(error) {
						response.status(500)
						.json({error: true, message: "ERROR: Unable to save update " + request.body.oldName + " in Database: " + error});
					});
				}
			})
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.delete(function(request, response) {
		models.Category.forge({name: request.body.name})
		.fetch()
		.then(function(category) {
			if (category) {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.body.name + " not found in Database: "});
			}
			category.destroy()
			.then(function() {
				response.status(200)
				.json({error: false, message: "Successfully deleted " + request.body.name});
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Unable to deleted " + request.body.name + " from Database: " + error});
			});
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	});

// CRUD for ToDos
router.route('/:category/todos')

	.all(auth, function(request, response, next) {
		request.category_name = request.params.category;
		next();
	})

	.post(function(request,response) {
		// get category id
		var categoryId = null;
		models.Category.forge({name: request.category_name})
		.fetch({require: true})
		.then(function(category){
			if (category) {

				categoryId = category.get('id');
				// create new todo
				// date format must be 'yyyy-mm-dd hh:mm:ss+/-<time zone>' e.g. '1995-02-26 09:25:26.056+09'
				var newToDo = new models.Todo({
					name: request.body.name,
					description: request.body.description,
					set_time: request.body.set_time,
					date: request.body.date,
					category_id: categoryId,
					user_id: request.user.get('id')
				});

				newToDo.fetch()
				.then(function(todo) {
					if(todo) {
						response.status(400)
						.json({error: true, message: "ERROR: category already exists"});
					} else {
						newToDo.save()
						.then(function() {
							response.status(201)
							.json({error: false, message: "Sucessfully created " + request.body.name + " in Database"});
						})
						.catch(function(error) {
							response.status(500)
							.json({error: true, message: "ERROR: Unable to create " + request.body.name + " in Database: " + error});
						});
					}
				})
				.catch(function(error) {
					response.status(500)
					.json({error: true, message: "ERROR: Database query failed: " + error});
				});
			} else {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.category_name + " not found in Database: "});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.get(function(request, response) {
		helper.getToDoPromise(request.category_name, response, helper.useToDoPromise);
	})

	.put(function(request, response) {
		models.Category.forge({
			name: request.body.oldName,
			user_id: request.user.get('id')
		})
		.fetch()
		.then(function(oldCategory) {
			if (!oldCategory) {
				 response.status(404)
				 .json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: "});
			}
			models.Category.forge({
				name: request.body.newName,
				user_id: request.user.get('id')
			})
			.fetch()
			.then(function(newCategory) {
				if(newCategory) {
					response.status(400)
					.json({error: true, message: "ERROR: category already exists"});
				} else {
					oldCategory.save({
						name: request.body.newName || category.get('name'),
						user_id: request.user.get('id') || category.get('user_id')
					})
					.then(function() {
						response.status(200)
						.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
					})
					.catch(function(error) {
						response.status(500)
						.json({error: true, message: "ERROR: Unable to save update " + request.body.oldName + " in Database: " + error});
					});
				}
			})
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	})

	.delete(function(request, response) {
		models.Category.forge({name: request.body.name})
		.fetch()
		.then(function(category) {
			if (category) {
				response.status(404)
				.json({error: true, message: "ERROR: " + request.body.name + " not found in Database: "});
			}
			category.destroy()
			.then(function() {
				response.status(200)
				.json({error: false, message: "Successfully deleted " + request.body.name});
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Unable to deleted " + request.body.name + " from Database: " + error});
			});
		})
		.catch(function(error) {
			response.status(404)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	});

exports.router = router;