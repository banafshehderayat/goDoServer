var express = require('express');
var router = express.Router();
var passport = require('passport');
var LocalStrategy = require('passport-local').Strategy;
var FBStrategy = require('passport-facebook').Strategy;
var path = require('path');

// MODELS
var models = require('../Database/models')

// COLLECTIONS
var collections = require('../Database/collections');

//USEFEL MIDDLEWARE
var auth = function(request, response, next) {
	if(request.isAuthenticated()) {
		next();
	} else {
		response.status(401)
		.json({error: true, message: "ERROR: Must be signed in as a user to access this data"});
	}
};

var notAuth = function(request, response, next) {
	if(!request.isAuthenticated()) {
		next();
	} else {
		response.status(401)
		.json({error: true, message: "ERROR: Already logged in"});
	}
};

//PASSPORT set up
passport.use(new LocalStrategy(function(username, password, done){
	models.User.forge({email: username})
	.fetch()
	.then(function (user) {
		if (!user) {
			console.log("Error: user not found")
			return done(null, false, { message: "Error: user not found" });
		} else if (password != user.get('password')) {
			console.log("Error: incorrect password");
			return done(null, false, { message: "Error: incorrect password" });
		} else {
			var email = user.get('email');
			return done(null, user,  { message: email + " has logged in" });
		}
	})
	.catch( function(err) {
		if (err) {
			console.log("Error: Database query failed");
			return done(null);
		}
	});
}));

passport.serializeUser(function(user, done) {
	done(null, user.id);
});

passport.deserializeUser(function(id, done) {
	models.User.forge({id: id})
	.fetch()
	.then(function(user){
		done(null, user);
	})
	.catch(function(err){
		done(err);
	})
});


exports.passport = passport;

//ROUTES - FIX LATER
router.get('/', function(request,response) {
	if (request.user){
		response.json(request.user.get('email') + " is signed in");
	} else {
		collections.Users.forge()
		.fetch()
		.then (function (users) {
			response.status(200).json(users);
		})
		.catch(function () {
			response.status(400)
			.json("ERROR: can't find users");
		});
	}
})

// SIGN UP ROUTES
router.route('/sign_in')
	.all(notAuth)
	.get(function(request, response) {
		response.sendFile(path.join(__dirname, '../', 'public/index.html'));
	})
	.post(function(request,response,next) {
		if (!request.body.email) {
			response.status(400)
			.json("Please enter an email");
		} else if (!request.body.password){
			response.status(400)
			.json("Please enter a password");
		} else {
			models.User.forge({email: request.body.email})
			.fetch()
			.then(function (user) {
				if (user) {
					response.status(400)
					.json("the email: " + user + " is already being used");
				} else {
					var newUser = new models.User({
						email: request.body.email,
						password: request.body.password
					});
					newUser.save();
					response.json("Done");
				}
			})
			.catch(function(err) {
				console.log("ERROR: something with finding users");
			});
		}
	}, passport.authenticate('local'));

// LOGIN ROUTES
router.route('/login')

	.post(passport.authenticate('local', { failureRedirect: '/sign_in' }), function(request, reponse) {
		if(request.user) {
			response.status(401)
			.json({error: true, message: "ERROR: Already logged in as " + request.user.get('email')});
		} else {
			reponse.status(200)
			.json({error: false, message: request.user.get('email') + " has logged in"});
		}
	})

	.get(function(request, response) {
		if(request.user) {
			response.status(200)
			.json({error: true, message: "ERROR: Already logged in as " + request.user.get('email')});
		} else {
			response.status(401)
			.json({error: true, message: "ERROR: Not logged in as anyone"});
		}
	});


// LOG OUT ROUTES
router.route('/logout')
	.all(function(request, response, next){
		if(request.user) {
			next();
		} else {
			response.status(401)
			.json({error: true, message: "ERROR: Must be signed in as a user to access this data"});
		}
	})
	.post(function(request, response) {
		email = request.user.get('email');
		request.logout();
		response.json(email + " has signing out");
	});

// USER INFO
router.route('/in')
	.get(function(request, response){
		response.json(Boolean(request.user));
	});

// CRUD FOR CATEGORIES - retrieves data from user currently signed in
router.route('/categories')
	.all(auth)
	.post(function(request,response) {
		var newCategory = new models.Category({
			name: request.body.name,
			user_id: request.user.get('id')
		});
		newCategory.fetch()
		.then(function(category) {
			if(category) {
				response.status(400)
				.json({error: true, message: "ERROR: category already exists"});
			} else {
				newCategory.save()
				.then(function() {
					response.status(201)
					.json({error: false, message: "Sucessfully created " + request.body.name + " in Database"});
				})
				.catch(function() {
					response.status(500)
					.json({error: true, message: "ERROR: Unable to create " + request.body.name + " in Database: " + err});
				});
			}
		})
		.catch(function(err) {
			response.status(500)
			.json({error: true, message: "ERROR: Unable to fetch data from Database: " + err});
		});
	})

	.get(function(request, response) {
		request.user.fetch({ withRelated: ['categories']})
		.then(function(user) {
			response.status(200)
			.json({error: false, message: "Sucessfuly read data from Database", data: user.related('categories')});
		})
		.catch(function(err){
			response.status(500)
			.json({error: true, message: "ERROR: Unable to read users categories' from Database: " + err});
		});
	})

	.put(function(request, response) {
		models.Category.forge({
			name: request.body.oldName,
			user_id: request.user.get('id')
		})
		.fetch()
		.then(function(oldCategory) {
			if (!oldCategory) {
				throw "TypeError: category undefined";
			}
			models.Category.forge({
				name: request.body.newName,
				user_id: request.user.get('id')
			})
			.fetch()
			.then(function(newCategory) {
				if(newCategory) {
					response.status(400)
					.json({error: true, message: "ERROR: category already exists"});
				} else {
					oldCategory.save({
						name: request.body.newName || category.get('name'),
						user_id: request.user.get('id') || category.get('user_id')
					})
					.then(function() {
						response.status(200)
						.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
					})
					.catch(function(err) {
						response.status(500)
						.json({error: true, message: "ERROR: Unable to save update " + request.body.oldName + " in Database: " + err});
					});
				}
			})
		})
		.catch(function(err) {
			response.status(404)
			.json({error: true, message: "ERROR: " + request.body.oldName + " not found in Database: " + err});
		})
	})

	.delete(function(request, response) {
		models.Category.forge({name: request.body.name})
		.fetch()
		.then(function(category) {
			category.destroy()
			.then(function() {
				response.status(200)
				.json({error: false, message: "Successfully deleted " + request.body.name});
			})
			.catch(function(err) {
				response.status(500)
				.json({error: true, message: "ERROR: Unable to deleted " + request.body.name + " from Database: " + err});
			});
		})
		.catch(function(err) {
			response.status(404)
			.json({error: true, message: "ERROR: " + request.body.name + " not found in Database: " + err});
		});
	});

exports.router = router;