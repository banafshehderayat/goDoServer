// MODELS
var models = require('../Database/models')

var getIt = function(_user, _name, _type, response) {
	if (_name == 'all') {
		_user.fetch({ withRelated: [_type]})
		.then(function(user) {
			if (_type == 'todos') {
				response.status(200)
				.json({error: false, message: "Sucessfuly read data from Database", data: user.related(_type)});
			} else if (_type == 'routines') {
				getAvailibility(user, response);
			}
		})
		.catch(function(error){
			response.status(500)
			.json({error: true, message: "ERROR: Unable to read user's " + _type + " from Database: " + error});
		});
	} else {
		models.Category.forge({name: _name})
		.fetch()
		.then(function(category) {
			if (category) {
				category.fetch({ withRelated: [_type]})
				.then(function(category) {
					if (_type == 'todos') {
						response.status(200)
						.json({error: false, message: "Sucessfuly read data from Database", data: category.related('todos')});
					} else if (_type == 'routines') {
						getAvailibility(category, response);
					}
				})
				.catch(function(error){
					response.status(500)
					.json({error: true, message: "ERROR: Unable to read user's " + _type + " from Database: " + error});
				});
			} else {
				response.status(404)
				.json({error: true, message: "ERROR: " + _name + " not found in Database: "});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	}
}

exports.getIt = getIt;

var saveIt = function(_newItem, _existingItem, _type, request, response) {
	if(_existingItem) {
		response.status(400)
		.json({error: true, message: "ERROR: " + _type + " already exists"});
	} else {
		_newItem.save()
		.then(function() {
			if (_type == 'todo' || _type == 'category') {
				response.status(201)
				.json({error: false, message: "Sucessfully created " + _newItem.get('name') + " in Database"});
			} else if (_type == 'routine') {
				newAvailibility(_newItem.get('id'), request, response);
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Unable to create " + _newItem.get('name') + " in Database: " + error});
		});
	}
}

exports.saveIt = saveIt;


var deleteIt = function(_existingItems, _name, _mustExist, response) {
	count = 0;
	for (var i=0; i < _existingItems.length; i++) {
		if (!_existingItems[i]) {
			if (_mustExist) {
				response.status(404)
				.json({error: true, message: "ERROR: " + _name + " not found in Database: "});
			} else {
				count++;
				if (count == _existingItems.length) {
					response.status(200)
					.json({error: false, message: "Successfully deleted " + _name});
				}
			}
		} else {
			_existingItems[i].destroy()
			.then(function() {
				count++;
				if (count == _existingItems.length) {
					response.status(200)
					.json({error: false, message: "Successfully deleted " + _name});
				}
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Unable to delete " + _name + " from Database: " + error});
			});
		}
	}
}

exports.deleteIt = deleteIt;

var newAvailibility = function(_routineID, request, response) {
	var newAvail = null;
	if (request.body.fixed_time == 'true') {
		// the availibility for a routine if fixed
		newAvail = new models.Fixed({
			routine_id: _routineID,
			days: request.body.days,
			time: request.body.time
		});
	}
	else {
		newAvail = new models.Flex({
			routine_id: _routineID,
			days: request.body.days,
			length: request.body.length
		});
	}
	newAvail.save()
	.then(function() {
		if (request.body.has_goal == 'true') {
			newGoal(_routineID, request, response);
		} else {
			response.status(201)
			.json({error: false, message: "Sucessfully created in Database"});
		}
	})
	.catch(function(error) {
		response.status(500)
		.json({error: true, message: "ERROR: Database query failed: " + error});
	});
}

var newGoal = function(_routineID, request, response) {

	var newGoal = new models.Goal({
		routine_id: _routineID,
		number: request.body.number,
		units: request.body.units,
		cycle: request.body.cycle
	})
	newGoal.save()
	.then(function(){
		models.Routine.forge({name: request.body.name, user_id: request.user.get('id'), category_id: request.categoryID})
		.fetch({required: true})
		.then(function(routine){
			routine.save({goal_id: newGoal.get('id')}, {patch: true})
			.then(function() {
				response.status(201)
				.json({error: false, message: "Sucessfully created in Database"});
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Database query failed: " + error});
			});
		})
	})
	.catch(function(error) {
		response.status(500)
		.json({error: true, message: "ERROR: Database query failed: " + error});
	});
}

exports.newGoal = newGoal;

var updateGoal = function(had_goal, newRoutine, request, response) {

	var goal = newRoutine.related('goal');
	if (had_goal && request.body.has_goal) {
		goal.save({
			number: request.body.number || goal.get('number'),
			units: request.body.units || goal.get('units'),
			cycle: request.body.cycle || goal.get('cycle')
		})
		.then(function() {
			response.status(200)
			.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Unable to save update for " + request.body.oldName + " in Database: " + error});
		});
	} else if (!had_goal && request.body.has_goal) {
		request.body.name = request.body.newName;
		newGoal(newRoutine.get('id'), request, response);
	} else if (had_goal && !request.body.has_goal) {
		goal.destroy()
		.then(function() {
			newRoutine.save({goal_id: null}, {patch: true})
			.then(function() {
				response.status(201)
				.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
			})
			.catch(function(error) {
				response.status(500)
				.json({error: true, message: "ERROR: Database query failed: " + error});
			});
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	} else {
		response.status(200)
		.json({error: false, message: "Successfully updated " + request.body.oldName + " to " + request.body.newName});
	}
}

exports.updateGoal = updateGoal;

var getAvailibility = function(category, response) {
	var routines = category.related('routines');
	var availibility = []
	var goals = []
	var type = null
	var _error = null
	var count = 0
	if (routines.length == 0) {
		response.status(200)
		.json({error: false, message: "Sucessfully read data from Database", data: []})
	}
	for (var i=0; i < routines.length; i++) {
		if(routines.models[i].get('fixed_time')) {
			type = 'fixed';
		} else {
			type = 'flex'
		}
		routines.models[i].fetch({ withRelated: [type, 'goal']})
		.then(function(routine) {
			count++;
			if (count == routines.length) {
				response.status(200)
				.json({error: false, message: "Sucessfuly read data from Database", data: routines.models});
			}
		})
		.catch(function(error) {
			response.status(500)
			.json({error: true, message: "ERROR: Database query failed: " + error});
		});
	}
}